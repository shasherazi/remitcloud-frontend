/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NavbarLayoutRouteImport } from './routes/_NavbarLayout/route'
import { Route as IndexImport } from './routes/index'
import { Route as NavbarLayoutBreadcrumbsRouteImport } from './routes/_NavbarLayout/_breadcrumbs/route'
import { Route as NavbarLayoutBreadcrumbsComplaintsIndexImport } from './routes/_NavbarLayout/_breadcrumbs/complaints/index'

// Create/Update Routes

const NavbarLayoutRouteRoute = NavbarLayoutRouteImport.update({
  id: '/_NavbarLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const NavbarLayoutBreadcrumbsRouteRoute =
  NavbarLayoutBreadcrumbsRouteImport.update({
    id: '/_breadcrumbs',
    getParentRoute: () => NavbarLayoutRouteRoute,
  } as any)

const NavbarLayoutBreadcrumbsComplaintsIndexRoute =
  NavbarLayoutBreadcrumbsComplaintsIndexImport.update({
    id: '/complaints/',
    path: '/complaints/',
    getParentRoute: () => NavbarLayoutBreadcrumbsRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_NavbarLayout': {
      id: '/_NavbarLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NavbarLayoutRouteImport
      parentRoute: typeof rootRoute
    }
    '/_NavbarLayout/_breadcrumbs': {
      id: '/_NavbarLayout/_breadcrumbs'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NavbarLayoutBreadcrumbsRouteImport
      parentRoute: typeof NavbarLayoutRouteImport
    }
    '/_NavbarLayout/_breadcrumbs/complaints/': {
      id: '/_NavbarLayout/_breadcrumbs/complaints/'
      path: '/complaints'
      fullPath: '/complaints'
      preLoaderRoute: typeof NavbarLayoutBreadcrumbsComplaintsIndexImport
      parentRoute: typeof NavbarLayoutBreadcrumbsRouteImport
    }
  }
}

// Create and export the route tree

interface NavbarLayoutBreadcrumbsRouteRouteChildren {
  NavbarLayoutBreadcrumbsComplaintsIndexRoute: typeof NavbarLayoutBreadcrumbsComplaintsIndexRoute
}

const NavbarLayoutBreadcrumbsRouteRouteChildren: NavbarLayoutBreadcrumbsRouteRouteChildren =
  {
    NavbarLayoutBreadcrumbsComplaintsIndexRoute:
      NavbarLayoutBreadcrumbsComplaintsIndexRoute,
  }

const NavbarLayoutBreadcrumbsRouteRouteWithChildren =
  NavbarLayoutBreadcrumbsRouteRoute._addFileChildren(
    NavbarLayoutBreadcrumbsRouteRouteChildren,
  )

interface NavbarLayoutRouteRouteChildren {
  NavbarLayoutBreadcrumbsRouteRoute: typeof NavbarLayoutBreadcrumbsRouteRouteWithChildren
}

const NavbarLayoutRouteRouteChildren: NavbarLayoutRouteRouteChildren = {
  NavbarLayoutBreadcrumbsRouteRoute:
    NavbarLayoutBreadcrumbsRouteRouteWithChildren,
}

const NavbarLayoutRouteRouteWithChildren =
  NavbarLayoutRouteRoute._addFileChildren(NavbarLayoutRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof NavbarLayoutBreadcrumbsRouteRouteWithChildren
  '/complaints': typeof NavbarLayoutBreadcrumbsComplaintsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof NavbarLayoutBreadcrumbsRouteRouteWithChildren
  '/complaints': typeof NavbarLayoutBreadcrumbsComplaintsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_NavbarLayout': typeof NavbarLayoutRouteRouteWithChildren
  '/_NavbarLayout/_breadcrumbs': typeof NavbarLayoutBreadcrumbsRouteRouteWithChildren
  '/_NavbarLayout/_breadcrumbs/complaints/': typeof NavbarLayoutBreadcrumbsComplaintsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/complaints'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/complaints'
  id:
    | '__root__'
    | '/'
    | '/_NavbarLayout'
    | '/_NavbarLayout/_breadcrumbs'
    | '/_NavbarLayout/_breadcrumbs/complaints/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  NavbarLayoutRouteRoute: typeof NavbarLayoutRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  NavbarLayoutRouteRoute: NavbarLayoutRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_NavbarLayout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_NavbarLayout": {
      "filePath": "_NavbarLayout/route.tsx",
      "children": [
        "/_NavbarLayout/_breadcrumbs"
      ]
    },
    "/_NavbarLayout/_breadcrumbs": {
      "filePath": "_NavbarLayout/_breadcrumbs/route.tsx",
      "parent": "/_NavbarLayout",
      "children": [
        "/_NavbarLayout/_breadcrumbs/complaints/"
      ]
    },
    "/_NavbarLayout/_breadcrumbs/complaints/": {
      "filePath": "_NavbarLayout/_breadcrumbs/complaints/index.tsx",
      "parent": "/_NavbarLayout/_breadcrumbs"
    }
  }
}
ROUTE_MANIFEST_END */
